package legendary.octo.sniffle.crypto;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

import lombok.NonNull;

public class RC4ImplTest {

    /**
     * Code generated from RFC hex for keystream using:
     * awk '{printf "{"; for (i=5;i<NF;i++) printf "0x%s, ", $i; printf "0x%s},\n", $NF}' inputFile
     * 
     * and for keystream offsets using:
     * awk '{printf "%s, ", $2}' inputFile
     */

    // Type-1 key test vector from RFC 6229
    private final int[] testVector1Key = {
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
    };

    private final int[] testVector1KeystreamOffsets = {
        0, 16, 240, 256, 496, 512, 752, 768, 1008, 1024, 1520, 1536, 2032, 2048, 3056, 3072, 4080, 4096,
    };

    private final int[][] testVector1Keystream = {
        {0x97, 0xab, 0x8a, 0x1b, 0xf0, 0xaf, 0xb9, 0x61, 0x32, 0xf2, 0xf6, 0x72, 0x58, 0xda, 0x15, 0xa8},
        {0x82, 0x63, 0xef, 0xdb, 0x45, 0xc4, 0xa1, 0x86, 0x84, 0xef, 0x87, 0xe6, 0xb1, 0x9e, 0x5b, 0x09},
        {0x96, 0x36, 0xeb, 0xc9, 0x84, 0x19, 0x26, 0xf4, 0xf7, 0xd1, 0xf3, 0x62, 0xbd, 0xdf, 0x6e, 0x18},
        {0xd0, 0xa9, 0x90, 0xff, 0x2c, 0x05, 0xfe, 0xf5, 0xb9, 0x03, 0x73, 0xc9, 0xff, 0x4b, 0x87, 0x0a},
        {0x73, 0x23, 0x9f, 0x1d, 0xb7, 0xf4, 0x1d, 0x80, 0xb6, 0x43, 0xc0, 0xc5, 0x25, 0x18, 0xec, 0x63},
        {0x16, 0x3b, 0x31, 0x99, 0x23, 0xa6, 0xbd, 0xb4, 0x52, 0x7c, 0x62, 0x61, 0x26, 0x70, 0x3c, 0x0f},
        {0x49, 0xd6, 0xc8, 0xaf, 0x0f, 0x97, 0x14, 0x4a, 0x87, 0xdf, 0x21, 0xd9, 0x14, 0x72, 0xf9, 0x66},
        {0x44, 0x17, 0x3a, 0x10, 0x3b, 0x66, 0x16, 0xc5, 0xd5, 0xad, 0x1c, 0xee, 0x40, 0xc8, 0x63, 0xd0},
        {0x27, 0x3c, 0x9c, 0x4b, 0x27, 0xf3, 0x22, 0xe4, 0xe7, 0x16, 0xef, 0x53, 0xa4, 0x7d, 0xe7, 0xa4},
        {0xc6, 0xd0, 0xe7, 0xb2, 0x26, 0x25, 0x9f, 0xa9, 0x02, 0x34, 0x90, 0xb2, 0x61, 0x67, 0xad, 0x1d},
        {0x1f, 0xe8, 0x98, 0x67, 0x13, 0xf0, 0x7c, 0x3d, 0x9a, 0xe1, 0xc1, 0x63, 0xff, 0x8c, 0xf9, 0xd3},
        {0x83, 0x69, 0xe1, 0xa9, 0x65, 0x61, 0x0b, 0xe8, 0x87, 0xfb, 0xd0, 0xc7, 0x91, 0x62, 0xaa, 0xfb},
        {0x0a, 0x01, 0x27, 0xab, 0xb4, 0x44, 0x84, 0xb9, 0xfb, 0xef, 0x5a, 0xbc, 0xae, 0x1b, 0x57, 0x9f},
        {0xc2, 0xcd, 0xad, 0xc6, 0x40, 0x2e, 0x8e, 0xe8, 0x66, 0xe1, 0xf3, 0x7b, 0xdb, 0x47, 0xe4, 0x2c},
        {0x26, 0xb5, 0x1e, 0xa3, 0x7d, 0xf8, 0xe1, 0xd6, 0xf7, 0x6f, 0xc3, 0xb6, 0x6a, 0x74, 0x29, 0xb3},
        {0xbc, 0x76, 0x83, 0x20, 0x5d, 0x4f, 0x44, 0x3d, 0xc1, 0xf2, 0x9d, 0xda, 0x33, 0x15, 0xc8, 0x7b},
        {0xd5, 0xfa, 0x5a, 0x34, 0x69, 0xd2, 0x9a, 0xaa, 0xf8, 0x3d, 0x23, 0x58, 0x9d, 0xb8, 0xc8, 0x5b},
        {0x3f, 0xb4, 0x6e, 0x2c, 0x8f, 0x0f, 0x06, 0x8e, 0xdc, 0xe8, 0xcd, 0xcd, 0x7d, 0xfc, 0x58, 0x62},
    };

    // Type-2 key test vector from RFC 6229
    private final int[] testVector2Key = {
        0x83, 0x32, 0x22, 0x77, 0x2a
    };

    private final int[] testVector2KeystreamOffsets = {
        0, 16, 240, 256, 496, 512, 752, 768, 1008, 1024, 1520, 1536, 2032, 2048, 3056, 3072, 4080, 4096,
    };

    private final int[][] testVector2Keystream = {
        {0x80, 0xad, 0x97, 0xbd, 0xc9, 0x73, 0xdf, 0x8a, 0x2e, 0x87, 0x9e, 0x92, 0xa4, 0x97, 0xef, 0xda},
        {0x20, 0xf0, 0x60, 0xc2, 0xf2, 0xe5, 0x12, 0x65, 0x01, 0xd3, 0xd4, 0xfe, 0xa1, 0x0d, 0x5f, 0xc0},
        {0xfa, 0xa1, 0x48, 0xe9, 0x90, 0x46, 0x18, 0x1f, 0xec, 0x6b, 0x20, 0x85, 0xf3, 0xb2, 0x0e, 0xd9},
        {0xf0, 0xda, 0xf5, 0xba, 0xb3, 0xd5, 0x96, 0x83, 0x98, 0x57, 0x84, 0x6f, 0x73, 0xfb, 0xfe, 0x5a},
        {0x1c, 0x7e, 0x2f, 0xc4, 0x63, 0x92, 0x32, 0xfe, 0x29, 0x75, 0x84, 0xb2, 0x96, 0x99, 0x6b, 0xc8},
        {0x3d, 0xb9, 0xb2, 0x49, 0x40, 0x6c, 0xc8, 0xed, 0xff, 0xac, 0x55, 0xcc, 0xd3, 0x22, 0xba, 0x12},
        {0xe4, 0xf9, 0xf7, 0xe0, 0x06, 0x61, 0x54, 0xbb, 0xd1, 0x25, 0xb7, 0x45, 0x56, 0x9b, 0xc8, 0x97},
        {0x75, 0xd5, 0xef, 0x26, 0x2b, 0x44, 0xc4, 0x1a, 0x9c, 0xf6, 0x3a, 0xe1, 0x45, 0x68, 0xe1, 0xb9},
        {0x6d, 0xa4, 0x53, 0xdb, 0xf8, 0x1e, 0x82, 0x33, 0x4a, 0x3d, 0x88, 0x66, 0xcb, 0x50, 0xa1, 0xe3},
        {0x78, 0x28, 0xd0, 0x74, 0x11, 0x9c, 0xab, 0x5c, 0x22, 0xb2, 0x94, 0xd7, 0xa9, 0xbf, 0xa0, 0xbb},
        {0xad, 0xb8, 0x9c, 0xea, 0x9a, 0x15, 0xfb, 0xe6, 0x17, 0x29, 0x5b, 0xd0, 0x4b, 0x8c, 0xa0, 0x5c},
        {0x62, 0x51, 0xd8, 0x7f, 0xd4, 0xaa, 0xae, 0x9a, 0x7e, 0x4a, 0xd5, 0xc2, 0x17, 0xd3, 0xf3, 0x00},
        {0xe7, 0x11, 0x9b, 0xd6, 0xdd, 0x9b, 0x22, 0xaf, 0xe8, 0xf8, 0x95, 0x85, 0x43, 0x28, 0x81, 0xe2},
        {0x78, 0x5b, 0x60, 0xfd, 0x7e, 0xc4, 0xe9, 0xfc, 0xb6, 0x54, 0x5f, 0x35, 0x0d, 0x66, 0x0f, 0xab},
        {0xaf, 0xec, 0xc0, 0x37, 0xfd, 0xb7, 0xb0, 0x83, 0x8e, 0xb3, 0xd7, 0x0b, 0xcd, 0x26, 0x83, 0x82},
        {0xdb, 0xc1, 0xa7, 0xb4, 0x9d, 0x57, 0x35, 0x8c, 0xc9, 0xfa, 0x6d, 0x61, 0xd7, 0x3b, 0x7c, 0xf0},
        {0x63, 0x49, 0xd1, 0x26, 0xa3, 0x7a, 0xfc, 0xba, 0x89, 0x79, 0x4f, 0x98, 0x04, 0x91, 0x4f, 0xdc},
        {0xbf, 0x42, 0xc3, 0x01, 0x8c, 0x2f, 0x7c, 0x66, 0xbf, 0xde, 0x52, 0x49, 0x75, 0x76, 0x81, 0x15},

    };

    private void rfcTestVector(@NonNull int[] key, @NonNull int[] keystreamOffsets, @NonNull int[][] keystream) {
        var testKey = RC4Impl.intArrayToUnsignedByteArray(key);

        for (var i = 0; i < keystreamOffsets.length; i++) {
            var rc4 = new RC4Impl().forKey(testKey);

            var offset = keystreamOffsets[i];
            for (var j = 0; j < offset; j++) {
                rc4.nextKeystreamByte();
            }
        
            var testKeystream = RC4Impl.intArrayToUnsignedByteArray(keystream[i]);
            for (var ks: testKeystream) {
                assertEquals(ks, rc4.nextKeystreamByte());
            }
        }
    }    

    @Test
    public void testVector1() {
        rfcTestVector(testVector1Key, testVector1KeystreamOffsets, testVector1Keystream);
    }    

    @Test
    public void testVector2() {
        rfcTestVector(testVector2Key, testVector2KeystreamOffsets, testVector2Keystream);
    }

    // Test vector from https://en.wikipedia.org/wiki/RC4#Test_vectors
    private final String testVector3Key = "Secret";
    private final int[] testVector3Keystream = { 
        0x04, 0xD4, 0x6B, 0x05, 0x3C, 0xA8, 0x7B, 0x59 
    };

    private final String testVector3Plaintext = "Attack at dawn";
    private final int[] testVector3Ciphertext = {
        0x45, 0xA0, 0x1F, 0x64, 0x5F, 0xC3, 0x5B, 0x38, 0x35, 0x52, 0x54, 0x4B, 0x9B, 0xF5
    };

    @Test
    public void testVector3Keystream() {
        var rc4 = new RC4Impl().forKey(testVector3Key.getBytes());
        
        for (var ks: RC4Impl.intArrayToUnsignedByteArray(testVector3Keystream)) {
            assertEquals(ks, rc4.nextKeystreamByte());
        }
    }

    @Test
    public void testVector3Encrypt() {
        var rc4 = new RC4Impl();
        var keystream = rc4.encrypt(testVector3Plaintext.getBytes(), testVector3Key.getBytes());
        assertArrayEquals(testVector3Ciphertext, RC4Impl.unsignedByteArrayToIntArray(keystream));
    }

    @Test
    public void testVector3Decrypt() {
        var rc4 = new RC4Impl();
        var keystream = rc4.decrypt(RC4Impl.intArrayToUnsignedByteArray(testVector3Ciphertext), testVector3Key.getBytes());
        assertArrayEquals(testVector3Plaintext.getBytes(), keystream);
    }

    @Test
    public void testHelpers() {
        for (var ks: testVector1Keystream) {
            var byteKs = RC4Impl.intArrayToUnsignedByteArray(ks);
            var intKs = RC4Impl.unsignedByteArrayToIntArray(byteKs);
            assertArrayEquals(ks, intKs);
        }
    }    
}
